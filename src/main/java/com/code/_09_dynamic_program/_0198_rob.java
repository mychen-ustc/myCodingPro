/**
 * // 198. 打家劫舍
 * // 难度: easy
 * //
 * // 你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。
 * //
 * // 给定一个代表每个房屋存放金额的非负整数数组，计算你 不触动警报装置的情况下 ，一夜之内能够偷窃到的最高金额。
 * //
 * // 示例 1：
 * //
 * // 输入：[1,2,3,1]
 * // 输出：4
 * // 解释：偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。
 * //      偷窃到的最高金额 = 1 + 3 = 4 。
 * // 示例 2：
 * //
 * // 输入：[2,7,9,3,1]
 * // 输出：12
 * // 解释：偷窃 1 号房屋 (金额 = 2), 偷窃 3 号房屋 (金额 = 9)，接着偷窃 5 号房屋 (金额 = 1)。
 * //      偷窃到的最高金额 = 2 + 9 + 1 = 12 。
 * //  
 * // 提示：
 * //
 * // 0 <= nums.length <= 100
 * // 0 <= nums[i] <= 400
 * //
 * // 思路：
 * // 1.确认原问题与子问题：原问题为求n个房间的最优解，子问题为求前1个房间、前2个房间、前n-1个房间的最优解。
 * // 2.确认状态：第i个状态即为前i个房间能够获得的最大财报。
 * // 3.确认边界状态的值
 * //   3.1 前1个房间的最优解，第1个房间的财报。
 * //   3.2 前2个房间的最优解，第1/2个房间金额较大的
 * // 4.确认状态转移方程
 * //   4.1 选择第i个房间：第i个房间的金额+前i-2个房间的最优解
 * //   4.2 不选择第i个房间：前i-1个房间的最优解
 * //   动态规划状态转移方程：
 * //   dp[i] = max(dp[i-1], dp[i-2] +nums[i]), i>=3
 */

package com.code._09_dynamic_program;

class Solution_0198 {
    public int rob(int[] nums) {
        int n = nums.length;
        if (n == 0) return 0;
        if (n == 1) return nums[0];
        int[] dp = new int[n + 1];  // 值默认初始化为0
        dp[1] = nums[0];    // 如果只有1间房，可以偷
        dp[2] = Math.max(nums[0], nums[1]);     // 如果有2间房，取金额较大的
        for (int i = 3; i <= n; i++) {
            dp[i] = Math.max(dp[i - 2] + nums[i - 1], dp[i - 1]);   // 递推公式
        }

        return dp[n];   // 返回数组第n个元素，即为最高金额
    }
}

public class _0198_rob {

    public static void main(String[] args) {
        int[] nums = {2, 7, 9, 3, 1};
        Solution_0198 solution = new Solution_0198();
        int cnt = solution.rob(nums);
        System.out.println(cnt);
    }
}
