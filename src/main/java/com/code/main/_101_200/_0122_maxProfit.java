/**
 * // 122. 买卖股票的最佳时机 II
 * // 难度：简单
 * // 给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。
 * //
 * // 设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。
 * //
 * // 注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。
 * //
 * // 示例 1:
 * // 输入: [7,1,5,3,6,4]
 * // 输出: 7
 * // 解释: 在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。
 * //      随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6-3 = 3 。
 * //
 * // 示例 2:
 * // 输入: [1,2,3,4,5]
 * // 输出: 4
 * // 解释: 在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。
 * //      注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。
 * //      因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。
 * //
 * // 示例 3:
 * // 输入: [7,6,4,3,1]
 * // 输出: 0
 * // 解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。
 * //
 * // 提示：
 * // 1 <= prices.length <= 3 * 10 ^ 4
 * // 0 <= prices[i] <= 10 ^ 4
 */

package com.code.main._101_200;

class Solution_0122 {
    public int maxProfit(int[] prices) {
//        // 解法1 动态规划: dp[i][j]表示当天的收益。dp[i][0]表示当天不持有股票, dp[i][1]当天持有股票
//        int n = prices.length;
//        int[][] dp = new int[n][2];
//        dp[0][0] = 0;
//        dp[0][1] = -prices[0];
//        for (int i = 1; i < n; i++) {
//            // dp[i][0] 两种情况转移 1.前一天未持有股票(当天不买入), 2.前一天持有股票(当天卖出)
//            dp[i][0] = Math.max(dp[i - 1][0], dp[i - 1][1] + prices[i]);
//            // d[i][1] 两种情况转移 1.前一天持有股票(当天不卖出), 2.前一天未持有股票(当天买入)
//            dp[i][1] = Math.max(dp[i - 1][1], dp[i - 1][0] - prices[i]);
//        }
//        return dp[n - 1][0];

        // 解法2 贪心: 性能比方法1更优 100%
        // 由于股票的购买没有限制，因此整个问题等价于寻找 x 个不相交的区间
        int ans = 0;
        int n = prices.length;
        for (int i = 1; i < n; i++) {
            ans += Math.max(0, prices[i] - prices[i - 1]);
        }
        return ans;
    }
}

public class _0122_maxProfit {
    public static void main(String[] args) {
        // [7,1,5,3,6,4]
        int[] prices = {7, 1, 5, 3, 6, 4};
        Solution_0122 solution = new Solution_0122();
        int ans = solution.maxProfit(prices);
        System.out.println(ans);
    }
}
