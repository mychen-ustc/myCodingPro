/**
 * // 14- II. 剪绳子 II
 * // 难度：中等
 * // 给你一根长度为 n 的绳子，请把绳子剪成整数长度的 m 段（m、n都是整数，n>1并且m>1），每段绳子的长度记为 k[0],k[1]...k[m - 1] 。请问 k[0]*k[1]*...*k[m - 1] 可能的最大乘积是多少？例如，当绳子的长度是8时，我们把它剪成长度分别为2、3、3的三段，此时得到的最大乘积是18。
 * //
 * // 答案需要取模 1e9+7（1000000007），如计算初始结果为：1000000008，请返回 1。
 * //
 * // 示例 1：
 * //
 * // 输入: 2
 * // 输出: 1
 * // 解释: 2 = 1 + 1, 1 × 1 = 1
 * // 示例 2:
 * //
 * // 输入: 10
 * // 输出: 36
 * // 解释: 10 = 3 + 3 + 4, 3 × 3 × 4 = 36
 * //
 * // 提示：
 * // 2 <= n <= 1000
 * //
 * // 思路：找规律
 * // 数学推导总体分为两步：1 当所有绳段长度相等时，乘积最大。2 最优的绳段长度为 33 。
 * // 切分规则：
 * // 最优： 3 。把绳子尽可能切为多个长度为 3 的片段，留下的最后一段绳子的长度可能为 0,1,2 三种情况。
 * // 次优： 2 。若最后一段绳子长度为 2 ；则保留，不再拆为 1+1 。
 * // 最差： 1 。若最后一段绳子长度为 1 ；则应把一份 3 + 1 替换为 2 + 2，因为 2 * 2 > 3 * 1。
 */

package com.offer;

class Solution_14_II {
    public int cuttingRope(int n) {
        if (n <= 3)
            return n - 1;
        int b = n % 3, p = 1000000007;
        long ans = 1;
        int times = n / 3;           //线段被我们分成以3为大小的小线段个数
        for (int i = 1; i < times; i++) //从第一段线段开始验算，3的ret次方是否越界。这里只乘times-1次，还留了一个3，要看余数再处理
            ans = 3 * ans % p;
        if (b == 0) { // 被3整除了，已经是最大值
            ans = ans * 3 % p;   //刚好被3整数的，要算上前一段
        } else if (b == 1) {// 3*1<2*2，需要少拆分一根长度为3的绳子，将3+1拆分成2+2
            ans = ans * 4 % p;   //被3整数余1的，要算上前一段
        } else {
            ans = ans * 6 % p;       //被3整数余2的，要算上前一段
        }
        return (int) ans;
    }
}

public class _14_II_cuttingRope {
    public static void main(String[] args) {
        Solution_14_II solution = new Solution_14_II();
        int ans = solution.cuttingRope(1000);
        System.out.println(ans);
    }
}
